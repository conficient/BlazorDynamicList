@page "/fetchdata"
@using BaseClasses
@inject HttpClient Http

<h1>Dynamic Product List</h1>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col">
            <h5>Generic list of <code>ProductBase</code> types</h5>
            <p>We can only view the common <code>ProductBase</code> properties</p>
            <ul class="list-group">
                @foreach (var product in products)
                {
                    <li class="list-group-item">
                        <img src="@product.Image" class="rounded float-left mr-2" alt="@product.Name">
                        <h5>@product.Name</h5>
                        <p>Price: <b>$@product.Price.ToString("#,##0.00")</b> </p>
                        <span class="text-muted float-right">@product.ID</span>
                    </li>
                }
            </ul>
        </div>
        <div class="col">
            <h5>List with manual binding to component</h5>
            <p>We have to manually select the component to use.</p>
            @foreach (var product in products)
            {
                @* here we manually bind - simple with two, but quickly becomes untenable with say a hundred product types! *@
                @if (product is Library1.Product1 p1)
                {
                    <Library1.Component1 Product=@p1></Library1.Component1>
                }
                @if (product is Library2.Product2 p2)
                {
                    <Library2.Component2 Product=@p2></Library2.Component2>
                }
            }
        </div>
        <div class="col">
            <h5>List with dynamic binding to <code>DynamicComponent</code>.</h5>
            <p>The selection of the view component is now encapsulated within the <code>DynamicComponent</code>.</p>
            @foreach (var product in products)
            {
                <DynamicComponent Product=@product />
            }
        </div>
    </div>
    @if (!products.Any())
    {
        <b>Sorry, no products found</b>
    }
}

@code {
    ProductBase[] products;

    protected override async Task OnInitializedAsync()
    {
        // get sample data as JSON string
        var json = await Http.GetStringAsync("api/SampleData/Products?count=6");
        // deserialize the list using a typed-deserializer
        var data = BaseClasses.TypedSerializer.Deserialize(json);
        // set value
        products = (ProductBase[])data;
    }
}
